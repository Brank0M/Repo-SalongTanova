/*! For license information please see main.07414e08e6ffe4a1a5e6.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdatesalongtanova("main",{"./app/components/Preloader.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var a=s("./node_modules/lodash/each.js"),o=s.n(a),n=s("./app/classes/Component.js");s("./app/utils/text.js"),s("./node_modules/express/index.js");class r extends n.default{constructor(){super({element:".preloader",elements:{title:".preloader_title",number:".preloader_number",numberText:".preloader_number_text",images:document.querySelectorAll("img")}}),this.length=0,this.createLoader()}createLoader(){o()(this.elements.images,(e=>{const t=new Image;t.src=e.getAttribute("data-src"),t.onload=()=>{this.onAssetLoaded(t)}}))}onAssetLoaded(e){this.length+=1}}}},(function(e){e.h=()=>"9f0eb65636da9d0952b4"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,